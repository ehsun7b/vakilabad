package edu.mfldclin.mcrf.vakilabad.log;

import edu.mfldclin.mcrf.vakilabad.Application;
import java.awt.event.ActionEvent;
import java.io.IOException;
import java.time.LocalDateTime;
import javax.annotation.PostConstruct;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultCaret;
import javax.swing.text.html.HTMLDocument;
import javax.swing.text.html.HTMLEditorKit;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationContext;
import org.springframework.stereotype.Component;

/**
 *
 * @author Ehsun Behravesh <post@ehsunbehravesh.com>
 */
@Component
//@Scope(value = "prototype")
public class LogFrame extends javax.swing.JFrame {

    private static final Logger log = LoggerFactory.getLogger(LogFrame.class);

    @Autowired
    private LogService logService;

    /**
     * Creates new form LogFrame
     */
    public LogFrame() {
        initComponents();
        myInitComponents();
        setTitle("Log since " + LocalDateTime.now());
    }

    @PostConstruct
    public void init() {
        log.info("Adding LogFrame instance to the LogMonitors of LogService: " + this);
        logService.addMonitor((LogRecord logRecord) -> {
            logReceived(logRecord);
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txpLog = new javax.swing.JScrollPane();
        jtpLog = new javax.swing.JTextPane();
        tbtAlwaysOnTop = new javax.swing.JToggleButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jtpLog.setEditable(false);
        jtpLog.setContentType("text/html"); // NOI18N
        jtpLog.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        txpLog.setViewportView(jtpLog);

        tbtAlwaysOnTop.setText("Always on top");
        tbtAlwaysOnTop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tbtAlwaysOnTopActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(txpLog)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tbtAlwaysOnTop)
                .addContainerGap(372, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(txpLog, javax.swing.GroupLayout.DEFAULT_SIZE, 321, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tbtAlwaysOnTop)
                .addGap(12, 12, 12))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tbtAlwaysOnTopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tbtAlwaysOnTopActionPerformed
        tbtAlwaysOnTopAction(evt);
    }//GEN-LAST:event_tbtAlwaysOnTopActionPerformed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextPane jtpLog;
    private javax.swing.JToggleButton tbtAlwaysOnTop;
    private javax.swing.JScrollPane txpLog;
    // End of variables declaration//GEN-END:variables

    private void logReceived(LogRecord logRecord) {
        try {
            log.debug("LogFrame log received: " + logRecord);
            
            HTMLDocument doc = (HTMLDocument) jtpLog.getDocument();
            HTMLEditorKit editorKit = (HTMLEditorKit) jtpLog.getEditorKit();
            
            editorKit.insertHTML(doc, doc.getLength(), logRecord.getValue(), 0, 0, null);
        } catch (BadLocationException | IOException ex) {
            log.warn("Error in displaying log!", ex);
        }

    }

    public static LogFrame newInstance(ApplicationContext context) {
        try {
            return (LogFrame) Application.createBean(LogFrame.class, "LogFrame", context);
        } catch (InstantiationException | IllegalAccessException ex) {
            log.error("Creating new instance of LogFrame failed!", ex);
            return null;
        }
    }

    private void myInitComponents() {        
        DefaultCaret caret = (DefaultCaret) jtpLog.getCaret();
        caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);
    }

    private void tbtAlwaysOnTopAction(ActionEvent evt) {
        setAlwaysOnTop(tbtAlwaysOnTop.isSelected());
    }

}
